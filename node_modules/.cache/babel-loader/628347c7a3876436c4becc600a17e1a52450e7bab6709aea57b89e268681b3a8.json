{"ast":null,"code":"var _jsxFileName = \"F:\\\\2024 COURSE\\\\PROJECT++\\\\mernapp\\\\src\\\\screens\\\\MyOrder.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Footer from '../components/Footer';\nimport Navbar from '../components/Navbar';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MyOrder() {\n  _s();\n  const [orderData, setOrderData] = useState([]); // Ensure it's an array\n\n  const fetchMyOrder = async () => {\n    try {\n      const email = localStorage.getItem('userEmail');\n      console.log(\"Fetching orders for:\", email);\n      const response = await fetch(\"http://localhost:5000/api/myOrderData\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch orders');\n      }\n      const data = await response.json();\n      console.log(\"ðŸ”¹ Full API Response:\", data); // âœ… Check full response\n      console.log(\"ðŸ”¹ Order Data Extracted:\", data.orderData); // âœ… Check extracted data\n\n      setOrderData(data.orderData || []); // Ensure orderData is an array\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchMyOrder();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mt-4 text-black\",\n      children: orderData.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No orders found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: orderData.map((order, index) => {\n          console.log(\"Checking each order:\", order); // Debugging\n\n          // Ensure order_data exists and has items\n          if (!order.order_data || order.order_data.length === 0) {\n            return /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No items in this order.\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 40\n            }, this);\n          }\n          return order.order_data.slice(0).reverse().map((items, i) => Array.isArray(items) && items.length > 0 ? items.map((item, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card mt-3\",\n              style: {\n                width: \"18rem\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: item.img,\n                className: \"card-img-top\",\n                alt: item.name,\n                style: {\n                  height: \"120px\",\n                  objectFit: \"cover\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-body\",\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  className: \"card-title\",\n                  children: item.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Quantity: \", item.qty]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Size: \", item.size]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 64,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Price: \\u20B9\", item.price, \"/-\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 65,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 45\n            }, this)\n          }, `${index}-${i}-${j}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 41\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"This order has no items.\"\n          }, `${index}-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 37\n          }, this));\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(MyOrder, \"omML5zCzVwkSAU9aQWI9BtEDc7s=\");\n_c = MyOrder;\nvar _c;\n$RefreshReg$(_c, \"MyOrder\");","map":{"version":3,"names":["React","useEffect","useState","Footer","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","MyOrder","_s","orderData","setOrderData","fetchMyOrder","email","localStorage","getItem","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","map","order","index","order_data","slice","reverse","items","i","Array","isArray","item","j","style","width","src","img","alt","name","height","objectFit","qty","size","price","_c","$RefreshReg$"],"sources":["F:/2024 COURSE/PROJECT++/mernapp/src/screens/MyOrder.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Footer from '../components/Footer';\r\nimport Navbar from '../components/Navbar';\r\n\r\nexport default function MyOrder() {\r\n    const [orderData, setOrderData] = useState([]); // Ensure it's an array\r\n\r\n    const fetchMyOrder = async () => {\r\n        try {\r\n            const email = localStorage.getItem('userEmail');\r\n            console.log(\"Fetching orders for:\", email);\r\n    \r\n            const response = await fetch(\"http://localhost:5000/api/myOrderData\", {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ email })\r\n            });\r\n    \r\n            if (!response.ok) {\r\n                throw new Error('Failed to fetch orders');\r\n            }\r\n    \r\n            const data = await response.json();\r\n            console.log(\"ðŸ”¹ Full API Response:\", data); // âœ… Check full response\r\n            console.log(\"ðŸ”¹ Order Data Extracted:\", data.orderData); // âœ… Check extracted data\r\n    \r\n            setOrderData(data.orderData || []); // Ensure orderData is an array\r\n        } catch (error) {\r\n            console.error(\"Error fetching orders:\", error);\r\n        }\r\n    };\r\n    \r\n    useEffect(() => {\r\n        fetchMyOrder();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Navbar />\r\n            <div className=\"container mt-4 text-black\">\r\n                \r\n\r\n                {orderData.length === 0 ? (\r\n                    <p>No orders found.</p>\r\n                ) : (\r\n                    <div className=\"row\">\r\n                        {orderData.map((order, index) => {\r\n                            console.log(\"Checking each order:\", order); // Debugging\r\n\r\n                            // Ensure order_data exists and has items\r\n                            if (!order.order_data || order.order_data.length === 0) {\r\n                                return <p key={index}>No items in this order.</p>;\r\n                            }\r\n\r\n                            return order.order_data.slice(0).reverse().map((items, i) =>\r\n                                Array.isArray(items) && items.length > 0 ? (\r\n                                    items.map((item, j) => (\r\n                                        <div key={`${index}-${i}-${j}`} className=\"col-md-4\">\r\n                                            <div className=\"card mt-3\" style={{ width: \"18rem\" }}>\r\n                                                <img src={item.img} className=\"card-img-top\" alt={item.name} style={{ height: \"120px\", objectFit: \"cover\" }} />\r\n                                                <div className=\"card-body\">\r\n                                                    <h5 className=\"card-title\">{item.name}</h5>\r\n                                                    <p>Quantity: {item.qty}</p>\r\n                                                    <p>Size: {item.size}</p>\r\n                                                    <p>Price: â‚¹{item.price}/-</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    ))\r\n                                ) : (\r\n                                    <p key={`${index}-${i}`}>This order has no items.</p>\r\n                                )\r\n                            );\r\n                        })}\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}